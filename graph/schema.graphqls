# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar DateTime


#### Inputs ####
input UserInput {
  name: String!
  years: Int
  birthday: DateTime
  weight: Float
  height: Int
  active: Boolean
}

input ComplexInput {
  name: String!
  active: Boolean
}

input ScheduleInput {
  start: String!
  end: String!
}

input ScheduleComplexInput {
  schedule_id: Int!
  complex_id: Int!
  available: Boolean
  limit_people: Int
  count_people: Int
}

input UserComplexInput {
  user_id: Int!
  complex_id: Int!
  active: Boolean
}

#### Types ####
type User {
  id: Int
  name: String!
  years: Int!
  birthday: DateTime
  weight: Float
  height: Int
  active: Boolean
}

type Complex {
  id: Int
  name: String!
  active: Boolean
}

type Schedule {
  id: Int
  start: String
  end: String
}

type ScheduleComplex {
  id: Int
  schedule_id: Int!
  complex_id: Int!
  available: Boolean
  limit_people: Int
  count_people: Int
  schedule: Schedule
}

type UserComplex {
  id: Int
  user_id: Int!
  complex_id: Int!
  active: Boolean
  users: User
  complexes: Complex
}


type Query {
  user(id:ID!): User
  complex(id:ID!): Complex
  schedule(id:ID!): Schedule
  users: [User]!
  complexs: [Complex]!
  schedules: [Schedule]!
  scheduleComplex(complex_id:ID!, available:Boolean): [ScheduleComplex]!
  userComplexToUser(user_id:ID!): [UserComplex]! # list of complexes the user belongs
  userComplexToComplex(complex_id:ID!): [UserComplex]! # list of users the complex belongs
}


type Mutation {
  createUser(input: UserInput!): User
  createComplex(input: ComplexInput!): Complex
  createSchedule(input: ScheduleInput!): Schedule
  createScheduleComplex(input: ScheduleComplexInput!): ScheduleComplex
  createUserComplex(input: UserComplexInput!): UserComplex
  updateUser(input: UserInput!): User
  updateComplex(input: ComplexInput!): Complex
  deleteSchedule(input: ScheduleInput!): Schedule
  updateScheduleComplex(input: ScheduleComplexInput!): ScheduleComplex
  updateUserComplex(input: UserComplexInput!): UserComplex
}